import { BiconomySmartAccountV2, } from "@biconomy/account";
import { create } from "zustand";
import { combine } from "zustand/middleware";

export interface WalletMessage {
  // address is the wallet address of the smart account.
  address: string;
  // contract is the smart account instance or smart contract wallet as defined
  // by Biconomy.
  contract: BiconomySmartAccountV2 | undefined;
  // index is used to create multiple smart accounts for the given signer. The
  // first account is created using index 0.
  //
  //     https://docs.biconomy.io/Account/methods#createsmartaccountclient
  //
  index: number;
  // signer is the address of the EOA linked to the smart account. This signer
  // wallet is the embedded wallet generated by Privy.
  signer: string;
};

export const WalletStore = create(
  combine(
    {
      wallet: {} as WalletMessage,
    },
    (set) => ({
      delete: () => {
        set(() => {
          return {
            wallet: {
              address: "",
              contract: undefined,
              index: -1,
              signer: "",
            },
          };
        });
      },
      update: (w: WalletMessage) => {
        set(() => {
          return {
            wallet: w,
          };
        });
      },
    })
  )
);
